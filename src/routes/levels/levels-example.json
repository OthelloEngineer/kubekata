[
  {
    "name": "deployment",
    "levels": [
      {
        "title": "What is a pod",
        "picture": "https://kubernetes.io/docs/tutorials/kubernetes-basics/public/images/module_03_pods.svg",
        "description": "A pod is a deployable unit in Kubernetes which represents a collection of containers in a Kubernetes cluster (usually it only consists of one container).<br><br>It shares the same network and file structure, which allows it to communicate with other pods efficiently and to share resources across the whole system.",
        "goal": "The goal of this lab is to understand the network within Kubernetes by simulating communication between two pods <br><br>Create a pod with the image nginx and expose it on port 80 . Then try to use the Intra-Cluster Shell to curl the container on port 80 where the pod is exposed.<br><br>To create a pod, you can use the following command: code|kubectl#run#nginx#--image=nginx#--port=80 <br><hr><br>What output does the curl command give?<br>Why isn't it possible to curl the nginx pod from your own terminal?",
        "hint": "You can get the IP of all pods by running: 'kubectl get pods -o wide'",
        "isCompleted": false,
        "isApproved": false,
        "isQuestion": true
      },
      {
        "title": "Configure a pod",
        "picture": "/Configure_a_pod.png",
        "description": "Pods, and many other Kubernetes artifacts, are configured using YAML files. These files <b>declaratively</b> describes how an artifact should be defined in the cluster.<br>A pod may be defined from descriptors such as the name of the pod, what container image it uses, the internal port, and labels.<br><br>When choosing the value of these descriptors, it can be a good idea to research what the container serves to do. For instance, the internal port should be assigned to what the container exposes (if it exposes anything at all).<br><br>For more information, visit Kubernetes' documentation on pods at: <a href='https://kubernetes.io/docs/concepts/workloads/pods/' target='_blank'>kubernetes.io/docs/concepts/workloads/pods</a>",
        "goal": "The goal of this lab is to configure a pod with specific requirements, including environment variables and resource limits.<br><br>Create a YAML file by using the extension .yml or .yaml .<br>The file should contain the data from the picture on the right. Each descriptor should be filled out with information of a nginx container.<br><br>The apiVersion and kind should be the equivalent of a pod .<br>The metadata#name should be nginx-pod , and the labels.app should be configure-a-pod .<br>The container image<i> </i>should be nginx, but you should find the port<i> </i>on your own. Try and find the image<i> </i>on docker hub to see its port.<br><br><hr><br>What does the containerPort describe?",
        "hint": "Try looking at the link in the info box for a solution.",
        "isCompleted": false,
        "isApproved": false,
        "isQuestion": false
      },
      {
        "title": "Access a pod",
        "description": "Learn how to access the containers running inside a pod using various methods such as kubectl exec, port forwarding, and service exposure.",
        "goal": "The goal is to access the running pod and inspect the logs, run commands inside the container, and access the pod from outside the cluster.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "Pod resources",
        "description": "Understand how to manage and monitor the resources used by pods, including CPU, memory, and storage.",
        "goal": "The goal is to define and monitor resource requests and limits for pods to ensure efficient use of cluster resources.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "Labels",
        "description": "Learn about labeling resources in Kubernetes to organize and select subsets of objects.",
        "goal": "The goal is to use labels and selectors to organize pods and other resources effectively.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "ReplicaSet",
        "description": "A ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
        "goal": "The goal is to create a ReplicaSet that maintains a desired number of pod replicas and manages their lifecycle.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "The scary deployment",
        "description": "Explore advanced deployment strategies in Kubernetes, including canary releases and blue-green deployments.",
        "goal": "The goal is to implement and manage complex deployment strategies in a Kubernetes cluster.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "The not-so-scary deployment",
        "description": "Understand the basics of deploying applications in Kubernetes, focusing on simplicity and reliability.",
        "goal": "The goal is to deploy a simple application using Kubernetes' deployment resources and manage its lifecycle.",
        "isCompleted": false,
        "isQuestion": false
      }
    ]
  },
  {
    "name": "service",
    "levels": [
      {
        "title": "What is a service",
        "description": "A Service in Kubernetes is an abstraction that defines a logical set of Pods and a policy by which to access them.",
        "goal": "The goal is to create a Kubernetes Service to expose a set of Pods, allowing them to be accessed from within and outside the cluster.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "Service types",
        "description": "Learn about the different types of Services in Kubernetes, including ClusterIP, NodePort, and LoadBalancer.",
        "goal": "The goal is to create and understand the use cases for different Kubernetes Service types.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "Service discovery",
        "description": "Service discovery in Kubernetes involves finding and accessing Services within a cluster.",
        "goal": "The goal is to configure service discovery mechanisms and access Services by name within a Kubernetes cluster.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "Service load balancing",
        "description": "Explore how Kubernetes Services distribute traffic across Pods using load balancing.",
        "goal": "The goal is to implement and test load balancing for a Service in a Kubernetes cluster.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "Service DNS",
        "description": "Kubernetes uses DNS to allow Services to be discovered by name, automatically creating DNS records for Services.",
        "goal": "The goal is to configure and test DNS-based service discovery in a Kubernetes cluster.",
        "isCompleted": false,
        "isQuestion": false
      },
      {
        "title": "Service annotations",
        "description": "Annotations in Kubernetes provide a way to attach metadata to objects and are used for specific configuration purposes.",
        "goal": "The goal is to apply annotations to Services to influence their behavior and integrate with external systems.",
        "isCompleted": false,
        "isQuestion": false
      }
    ]
  }
]
